{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"team_",
				"team_leader"
			]
		]
	},
	"buffers":
	[
		{
			"file": "application_traceroute.py",
			"settings":
			{
				"buffer_size": 86359,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#!/usr/bin/env python3"
			},
			"undo_stack":
			[
				[
					25,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAS0sBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAEtLAQAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "smart_vuln_crawle2r.py",
			"settings":
			{
				"buffer_size": 88670,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/simone/Repos/Progetti/application_traceroute"
	],
	"file_history":
	[
		"/home/simone/Repos/Progetti/application_traceroute/smart_vuln_crawler.py",
		"/home/simone/Repos/Progetti/application_traceroute/unified_security_scanner2.py",
		"/home/simone/Repos/Progetti/application_traceroute/unified_security_scanner.py",
		"/home/simone/Repos/Progetti/application_traceroute/SecList.txt",
		"/home/simone/Repos/Progetti/application_traceroute/application_traceroute.py",
		"/home/simone/Repos/Progetti/WP-Scanner/CVE-2023-5360-RoyalElementorAddons/royal_elementor_rce_tester.py",
		"/home/simone/Repos/Progetti/WP-Scanner/endpoint_discovery.py",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/functions.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/style.css",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/assets/js/main.js",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/assets/js/dognet-particles.js",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/index.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-sentinel-core.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/DOGNET_TECHNOLOGIES-TEMA_WORDPRESS_CYBER.txt",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/header.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/footer.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-servizi.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-risorse.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-chi-siamo.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-contatti.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-vapt.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-cti.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-hardening.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-osint.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-valutazione-rischio.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-valutazione-gdpr.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-termini-e-condizioni.php",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/Progetti/SitoWeb_TemaWP/dognet-cyber/page-cookie-policy-ue.php",
		"/home/simone/Repos/Progetti/bypass_wordfence/waf_bypass_tester.py",
		"/home/simone/Repos/Progetti/sentinelcore/.gitignore",
		"/home/simone/Lavoro/Bounty/centro.txt",
		"/home/simone/Desktop/opensearch_desc.php",
		"/home/simone/Desktop/opensearch_desc2.php",
		"/home/simone/Repos/NoyseSysStuff/Crawler_dw_js/options.txt",
		"/home/simone/Repos/NoyseSysStuff/js-request-interceptor/LICENSE",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/state.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/lib.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/api/mod.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/auth/mod.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/handlers/auth.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/handlers/user.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/handlers/vulnerability.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/main.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/Cargo.toml",
		"/home/simone/Desktop/error.txt",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/state_BACKUP_7487.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/state_BASE_7487.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/state_LOCAL_7487.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/state_REMOTE_7487.rs",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/articoli/Post_Creati/CSPM/testo.txt",
		"/home/simone/Lavoro/DOGNET/Documentazione_Lavoro/articoli/Post_Creati/CSPM/testo2.txt",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/auth/claims_extractor.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/handlers/audit.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/handlers/asset.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/handlers/plugin.rs",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/handlers/team.rs",
		"/home/simone/Repos/Progetti/Documentazione/DescrizionedelServer-Sentinel Core",
		"/home/simone/.JWT4B/config.json",
		"/home/simone/Repos/Progetti/Documentazione/Backend-Sentinel Core",
		"/home/simone/Desktop/output.html",
		"/home/simone/Repos/Progetti/sentinelcore/vulnerability-manager/src/handlers/security.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/auth.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/models/user.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/vulnerability.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/models/vulnerability.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/auth/mod.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/audit.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/Cargo.toml",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/api/mod.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/user.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/security.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/migrations/002_initial_schema.sql",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/main.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/mod.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/models/mod.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/models/plugin.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/plugin.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/models/team.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/auth/password_validator.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/models/report.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/models/asset.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/config/default.yaml",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/plugins/executor.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/plugins/scanner.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/plugins/network_discovery/main.py",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/plugins/network_discovery/plugin.yaml",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/plugins/mod.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/reset_password.sql",
		"/home/simone/Repos/Progetti/vulnerability-manager-frontend/MaterialUI",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/lib.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/vulnerability-manager.albero2.txt",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/StrutturaProgettoFront-end.txt",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/team.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/plugins/loader.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/report.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/notification.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/asset.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/migrations/seed_data.sql",
		"/home/simone/Repos/Progetti/vulnerability-manager/fix_sqlx_types.py",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/config/mod.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/.env",
		"/home/simone/Repos/Progetti/vulnerability-manager/revert_handler.py",
		"/home/simone/Repos/Progetti/vulnerability-manager/final_fix.py",
		"/home/simone/Repos/Progetti/vulnerability-manager/migrations/20250523000000_initial_schema.sql",
		"/home/simone/.cache/.fr-8gznAw/src/auth/mod.rs",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/models/notification.rs",
		"/home/simone/50",
		"/home/simone/aligroup.com_ips.txt",
		"/home/simone/Lavoro/Bounty/Swapcard/urls.txt",
		"/home/simone/Scaricati/ikea_vulnerability_report(1).md",
		"/home/simone/Repos/Default/Rec/Hacerone/hackerone",
		"/home/simone/Lavoro/CLIENTI/Gortani/INFO.txt",
		"/home/simone/Repos/Progetti/vulnerability-manager/vulnerability-manager.albero.txt",
		"/home/simone/Repos/Default/Rec/Hacerone/Documento senza nome",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/src/components/layout/Layout.jsx",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/src/pages/Dashboard.jsx",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/src/pages/Vulnerabilities.jsx",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/src/App.jsx",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/src/components/users/UserForm.jsx",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/src/components/common/ProtectedRoute.jsx",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/src/api/client.js",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/src/index.jsx",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/src/pages/Login.jsx",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/package.json",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/vite.config.js",
		"/home/simone/Repos/Progetti/vulnerability-manager/frontend/index.html",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/auth/password_validator.js",
		"/home/simone/Repos/Progetti/vulnerability-manager/src/handlers/notifation.rs"
	],
	"find":
	{
		"height": 30.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"AppState;",
			"use vulnerability_manager::AppState;",
			"use crate::AppState;",
			"refresh_token",
			"update_data.status.map(|s| s as _),",
			"middleware::from_fn_with_state(auth.clone(), require_auth)",
			"State(auth): State<Arc<Auth>>",
			"use ipnetwork::IpNetwork;",
			"VulnerabilityFilter",
			"let ip_network: IpNetwork = new_vuln.ip_address.parse() ",
			"use ipnetwork::IpNetwork;",
			"pub ip_address:",
			"mut",
			"PaginationParams",
			"pub async fn logout",
			"&**pool",
			"evil",
			"https://example.com/",
			"',",
			"            '",
			"            ",
			"cd ~/tools/"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"&*pool",
			"cd ~/GIT/"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "application_traceroute.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86359,
						"regions":
						{
						},
						"selection":
						[
							[
								184,
								184
							]
						],
						"settings":
						{
							"auto_name": "#!/usr/bin/env python3",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "smart_vuln_crawle2r.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 88670,
						"regions":
						{
						},
						"selection":
						[
							[
								88670,
								88670
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										88669,
										88670
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										88668,
										88669
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 44899.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.mdpopups":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"pinned_build_system": "Packages/Rust/Rust.sublime-build",
	"project": "apptrace.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 269.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
